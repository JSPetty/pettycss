@import "config";

//--------------------------base-----------------------------//
.box-sizing(@type: border-box) {
  box-sizing: @type;
}

.margin(@tb:0, @lr:0) {
  magin: @tb, @lr;
}

.center(@prop: margin) {
  margin-left: auto;
  margin-right: auto;
}

.padding(@tb:0, @lr:0) {
  padding: @tb, @lr;
}

.transition(@prop, @time: 1s, @fc: liner) {
  -webkit-transition:@prop @time @fc;
  -moz-transition:@prop @time @fc;
  -o-transition:@prop @time @fc;
}

.flex() {
  display: flex;
  flex: 0 1 auto;
  flex-direction: row;
  flex-wrap: nowrap;
}

.col-base(@pd: @half-gutter-width) {
  box-sizing: border-box;
  flex: 0 0 auto;
  padding-right: @pd;
  padding-left: @pd;
}

//--------------------------grid-----------------------------//

.make-grid-helper() {
  // 基本
  .@{col-name}-xs,
  .@{col-name}-sm,
  .@{col-name}-md,
  .@{col-name}-lg {
    flex-grow: 1;
    flex-basis: 0;
    max-width: 100%;
  }

  .start {
    justify-content: flex-start;
    text-align: start;
  }
  .center {
    justify-content: center;
    text-align: center;
  }
  .end {
    justify-content: flex-end;
    text-align: end;
  }
  .top {
    align-items: flex-start;
  }
  .middle {
    align-items: center;
  }
  .bottom {
    align-items: flex-end;
  }
  .around {
    justify-content: space-around;
  }
  .between {
    justify-content: space-between;
  }
  .first {
    order: -1;
  }
  .last {
    order: 1;
  }
}

.make-grid-col-base(@len: @grid-count) {
  .col(@i) {
    @classList: ~".@{col-name}-xs-offset-@{i},.@{col-name}-sm-offset-@{i},.@{col-name}-md-offset-@{i},.@{col-name}-lg-offset-@{i},.@{col-name}-xs-@{i},.@{col-name}-sm-@{i},.@{col-name}-md-@{i},.@{col-name}-lg-@{i},.@{col-name}-xs,.@{col-name}-sm,.@{col-name}-md,.@{col-name}-lg";
    .col(@i + 1, ~"@{classList}");
    .make-grid-helper();
  }
  .col(@i, @list) when (@i =< @len){
    @classList: ~".@{col-name}-xs-offset-@{i},.@{col-name}-sm-offset-@{i},.@{col-name}-md-offset-@{i},.@{col-name}-lg-offset-@{i},.@{col-name}-xs-@{i},.@{col-name}-sm-@{i},.@{col-name}-md-@{i},.@{col-name}-lg-@{i}";
    .col(@i + 1, ~"@{classList},@{list}");
  }
  .col(@i, @list) when (@i > @len) {
    @{list} {
      .col-base();
    }
  }
  .col(1)
}

// 循环列
.make-col-loop(@type, @n, @i: 1) when (@i <= @n){
  @col-class-name: ~"@{col-name}-@{type}";
  .@{col-class-name}-@{i}{
    width: @i/@n*100%;
  }
  // 偏移
  .@{col-class-name}-offset-@{i}{
    margin-left: @i/@n*100%;
  }
  .make-col-loop(@type, @n, (@i + 1));
}

.get-media(@sc, @value) when (@sc = 'xs') {
  @media (min-width: @screenMap[xs]) {
    .make-col-loop(@value, @grid-count);
  }
}
.get-media(@sn, @value) when (@sn = 'sm') {
  @media (min-width: @screenMap[sm]) {
    .make-col-loop(@value, @grid-count);
  }
}
.get-media(@sn, @value) when (@sn = 'md') {
  @media (min-width: @screenMap[md]) {
    .make-col-loop(@value, @grid-count);
  }
}
.get-media(@sn, @value) when (@sn = 'lg') {
  @media (min-width: @screenMap[lg]) {
    .make-col-loop(@value, @grid-count);
  }
}

.make-grid(@sn: @screenMap) {
  each(@sn, .(@v, @k, @i){
    @media (min-width: @v) {
      .make-col-loop(@k, @grid-count);
    }
    //@media (min-width: @value) {
    //  .make-col-loop(@value, @grid-count);
    //}
  });
  // 媒体查询设置对应列类型css
}
/*---------------------------------------------------*/
